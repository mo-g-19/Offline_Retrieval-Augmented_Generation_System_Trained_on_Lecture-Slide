[
  {
    "doc": "lecture02_processed.json",
    "slide": "slide1",
    "text": "Chapter 3: Networking and Internetworking \u00a7 Concepts \u00a7 Switching \u00a7 Routing (IP) \u00a7 End-to-End Protocols (UDP/TCP)"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide2",
    "text": "Fundamentals \uf07aMany different agreements (protocols) are needed at various levels \uf07aApplication-level agreements \uf079Bit representation to meaning of each message \uf07aOther-levels and agreements \uf079How to actually transmit messages through a network \uf079Addressing, performance, scalability, reliability, security A B OS OS How can A and B communicate? network"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide3",
    "text": "What\u2019s Network (the Internet)? To learn more, take CECS 303 \uf07aNetwork of networks connecting millions of devices: \uf079Hosts (end systems) \uf079Links (fiber to satellite) \uf079Routers and switches \uf07aCollection of protocols providing communication services to distributed applications \uf07aNetworks are complex! From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide4",
    "text": "Switched Networks \uf079two or more nodes connected by a link, or \uf079two or more networks connected by a node \uf07aA network can be defined recursively as..."
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide5",
    "text": "Types of Networks https://www.youtube.com/watch?v=HLziLmaYsO0"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide6",
    "text": "Protocols and Layers"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide7",
    "text": "Conceptual layering of protocol software Layer n Layer 2 Layer 1 Message sent Message received Communication medium Sender Recipient"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide8",
    "text": "Protocol layers in the ISO Open Systems Interconnection (OSI) model !\"\"#A%CDA() *+,-,)DCDA() .,--A() L+C)-\"(+D M,DN(+2 PCDC4#A)2 *RS-A%C# T,--C8,4-,)D T,--C8,4+,%,A9,: .,):,+ ;,%A\"A,)D <CS,+- =(>>?)A%CDA() >,:A?>"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide9",
    "text": "Internet protocol stack \uf07aapplication: Protocols that are designed to meet the communication requirements of specific applications, often defining the interface to a service. (FTP, HTTP) \uf07atransport: process-to-process data transfer (TCP, UDP) \uf07anetwork: routing of datagrams from source to destination (IP, OSPF, BGP) \uf07alink: data transfer between neighboring network elements (PPP, Ethernet) \uf07aphysical: transmission of bits on a link (electrical signals on cable, light signals on fibre or other electr"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide10",
    "text": "ISO/OSI reference model \uf07apresentation: allow applications to interpret meaning of data, e.g., encryption, compression, machine- specific conventions \uf07asession: synchronization, check pointing, recovery of data exchange application presentation session transport network link physical From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide11",
    "text": "What is OSI mode? https://www.youtube.com/watch?v=Ilk7UXzV_Qc"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide12",
    "text": "ISO Architecture !\"#A%&AD%&#A\"%E#) *+,-+\"A,-#A\"#,*%&. /\"EA-%), 0NNO+P4,+%\" 5&#)#\",4,+%\" S#))+%\" T&4\")N%&, 8#,*%&. 94,4AO+\". 5-:)+P4O 8#,*%&. 94,4AO+\". 5-:)+P4O 8#,*%&. 94,4AO+\". 5-:)+P4O /\"EA-%), 0NNO+P4,+%\" 5&#)#\",4,+%\" S#))+%\" T&4\")N%&, 8#,*%&. 94,4AO+\". 5-:)+P4O"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide13",
    "text": "Encapsulation as it is applied in layered protocols !\"#A#%&'&()%*+#',#\" -../(0'&()%N/'2#\"*P#AA'4# 5#AA()%*+#',#\" S\"'%A.)\"&*+#',#\" T#&8)\"9*+#',#\""
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide14",
    "text": "The interaction between layers in the OSI model"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide15",
    "text": "An exchange using the OSI model"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide16",
    "text": "Summary of layers"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide17",
    "text": "TCP/IP layers Messages (UDP) or Streams (TCP) Application Transport Internet UDP or TCP packets IP datagrams Network-specific frames Message Layers Underlying network Network  interface Link Layer"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide18",
    "text": "TCP/IP and OSI model"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide19",
    "text": "Encapsulation in a message transmitted via TCP over an Ethernet Application message TCP header IP header Ethernet header Ethernet frame port TCP IP https://www.youtube.com/watch?v=OTwp3xtd4dg"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide20",
    "text": "The programmer's conceptual view of a TCP/IP Internet !\" #AA%CD()C*+ #AA%CD()C*+ I-\" ./\""
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide21",
    "text": "source application transport network link physical Ht Hn M segment Ht packets destination application transport network link physical Ht Hn Hl M Ht Hn M Ht M M network link physical link physical Ht Hn Hl M Ht Hn M Ht Hn M Ht Hn Hl M router switch Encapsulation message M Ht M Hn frame From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide22",
    "text": "OSI vs TCP/IP OSI Model TCP/IP model It is developed by ISO (International Standard Organization) It is developed by ARPANET (Advanced Research Project Agency Network). OSI model provides a clear distinction between interfaces, services, and protocols. TCP/IP doesn\u2019t have any clear distinguishing points between services, interfaces, and protocols. OSI refers to Open Systems Interconnection. TCP refers to Transmission Control Protocol. OSI uses the network layer to define routing standards and pr"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide23",
    "text": "Why layering? \uf07aExplicit structure allows identification, relationship of complex system\u2019s pieces \uf07aEach layer \uf079 gets a service from the one below, \uf079 performs a specific task, and \uf079 provides a service to the one above \uf07aModularization eases maintenance and updating of system \uf079We can change the implementation of a layer without affecting the rest of the system as long as the interfaces between the layer are kept the same! \uf07aIn some cases, layering considered harmful! Why? From Computer Networking by "
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide24",
    "text": "Routing (IP)"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide25",
    "text": "IP Addressing: introduction \uf07aIP address: 32-bit unique identifier for host, router interface \uf07ainterface: connection between host/router and physical link \uf079 router\u2019s typically have multiple interfaces \uf079 host typically has one interface \uf079 IP addresses associated with each interface 223.1.1.1 223.1.1.2 223.1.1.3 223.1.1.4 223.1.2.9 223.1.2.2 223.1.2.1 223.1.3.2 223.1.3.1 223.1.3.27 223.1.1.1 = 11011111 00000001 00000001 00000001 223 1 1 1 From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide26",
    "text": "Internet address structure, showing field sizes in bits ! \"# ABCDDE)* H I-./MN2E34 5MD.E34 6# 67 ABCDDE8* 6 H I-./MN2E34 5MD.E34 \"6 9 ABCDDEA* 6 6 H I-./MN2E34 5MD.E34 \"9 ABCDDE4E:;<B.=>CD.?* 6 6 6 H @<B.=>CD.ECAAN-DD \"! ABCDDEBE:N-D-NC-A?* 6 6 6 6 <a<D-A H"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide27",
    "text": "Decimal representation of Internet addresses octet 1 octet 2 octet 3 Class A: 1 to 127 0 to 255 0 to 255 1 to 254 Class B: 128 to 191 Class C: 192 to 223 224 to 239 Class D (multicast): Network ID Network ID Network ID Host ID Host ID Host ID Multicast address 0 to 255 0 to 255 1 to 254 0 to 255 0 to 255 0 to 255 0 to 255 0 to 255 0 to 255 Multicast address 0 to 255 0 to 255 1 to 254 240 to 255 Class E (reserved): 1.0.0.0 to 127.255.255.255 128.0.0.0 to 191.255.255.255 192.0.0.0 to 223.255.255.2"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide28",
    "text": "IPv4 Packet Header \uf07a Version (always set to the value 4 for IPv4) \uf07a IP Header Length (number of 32 -bit words forming the header, usually five) \uf07a Size of Datagram (in bytes, header + data) \uf07a Flags 3 bits: R (reserved bit set to 0) DF (Don't fragment ) MF (More fragments) \uf07a Time To Live (Number of hops /links which the packet may be routed over, decremented by most routers - used to prevent accidental routing loops) \uf07a Protocol (the type of transport packet being carried (e.g. 1 = ICMP; 6 = TCP; 1"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide29",
    "text": "Example of IP Packet"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide30",
    "text": "\uf07aEvery datagram packet contains destination\u2019s address \uf07aif connected to destination network, then forward to the host in LAN \uf079If network number of destination IP == my network number \uf07aif not directly connected, then forward to the host\u2019s default router \uf07aEach router maintains a forwarding table \uf079forwarding table maps network number (rather than host address) into next hop or interface number (if directly connected) Datagram Forwarding Strategy"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide31",
    "text": "An Example of Routing \uf07aA packet is submitted to Router A and destination is C, how to routing?"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide32",
    "text": "Addressing and Routing \uf07aAddress: byte-string that identifies a node \uf079usually unique \uf07aRouting: process of forwarding messages to the destination node based on its address \uf07aTypes of addresses \uf079unicast: node-specific \uf079broadcast: all nodes on the network \uf079multicast: some subset of nodes on the network https://www.youtube.com/watch?v=gQtgtKtvRdo"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide33",
    "text": "Address Translation in LAN \uf07aMap IP addresses into physical addresses of the destination host (if connected directly) or the next hop router \uf07aARP (Address Resolution Protocol) \uf079 Each host caches its table of IP to physical address bindings \uf079 table entries are discarded if not refreshed \uf078 timeout in about 10 minutes \uf079 broadcast request if IP address not in table \uf079 target machine send its physical address to the sender \uf079 target machine also updates add entry of the source in its table \uf078 It is likel"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide34",
    "text": "Addressing: routing to another LAN R 1A-23-F9-CD-06-9B 222.222.222.220 111.111.111.110 E6-E9-00-17-BB-4B CC-49-DE-D0-AB-7D 111.111.111.112 111.111.111.111 A 74-29-9C-E8-FF-55 222.222.222.221 88-B2-2F-54-1A-0F B 222.222.222.222 49-BD-D2-C7-56-2A walkthrough: send datagram from A to B via R assume  A knows B\u2019s IP address \uf07atwo ARP tables in  router R, one for each IP network (LAN) From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide35",
    "text": "Network layer forwarding table Host, router network layer functions: Routing protocols \u2022path selection \u2022RIP, OSPF, BGP IP protocol \u2022addressing conventions \u2022datagram format \u2022packet handling conventions ICMP protocol \u2022error reporting \u2022router \u201csignaling\u201d Transport layer: TCP, UDP Link layer physical layer Network layer From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide36",
    "text": "1 2 3 0111 value in arriving packet\u2019s header routing algorithm local forwarding table header value output link 0100 0101 0111 1001 3 2 2 1 Forwarding Problem: Where to Send Next? From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide37",
    "text": "Only IPv4? No, we need more! https://www.youtube.com/watch?v=bNmnRvZW3HU"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide38",
    "text": "IPv6"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide39",
    "text": "End-to-End Protocols (UDP/TCP)"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide40",
    "text": "End-to-End Protocols \uf07aUnderlying best-effort network \uf079 drop messages \uf079 re-orders messages \uf079 delivers duplicate copies of a given message \uf079 limits packet (not message) to some finite size \uf079 delivers messages after an arbitrarily long delay \uf07aCommon end-to-end services \uf079 guarantee message delivery \uf079 deliver messages in the same order they are sent \uf079 deliver at most one copy of each message \uf079 support arbitrarily large messages \uf079 support synchronization between sender and receiver \uf079 allow the receive"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide41",
    "text": "Transport Layer \uf07a provide logical communication between app processes running on different hosts \uf07a transport protocols run in end systems \uf079 sender side: breaks app messages into segments, passes to network layer \uf079 receiver side: reassembles segments into messages, passes to app layer \uf07a more than one transport protocol available to apps \uf079 Internet: TCP and UDP application transport network data link physical application transport network data link physical logical end-end transport From Computer "
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide42",
    "text": "Internet transport protocols services Transmission Control Protocol (TCP) service: \uf07a connection-oriented: setup required between client and server processes \uf07a reliable transport between sending and receiving process \uf07a flow control: sender won\u2019t overwhelm receiver \uf07a does not provide: timing, minimum throughput guarantees, security User Datagram Protocol (UDP) service: \uf07a unreliable data transfer between sending and receiving process \uf07a does not provide: connection setup, reliability, flow control, "
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide43",
    "text": "TCP: Overview \uf07afull duplex data: \uf079 bi-directional data flow in same connection \uf07aconnection-oriented: \uf079 handshaking (exchange of control msgs) \uf07aflow controlled: \uf079 sender will not overwhelm receiver \uf07apoint-to-point \uf079 one sender, one receiver \uf07areliable, in-order byte steam \uf07aPipelined \uf07asend & receive buffers !\"#$%C '\"\"( )*+ !%,'-./00%( )*+ (%#%12%-./00%( !\"#$%C '\"\"( !%P4%,C 566T1#5C1\", 8(1C%!-'5C5 566T1#5C1\", (%5'!-'5C5 From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide44",
    "text": "TCP Segment Format !\"#A%CD(F*H,AH-.L0 NH#H OPL45DS7 U,49%,# ND#9%,# W;,<LC = >.H?D @,?9#, A;*L,#ADL;BAC;%C ULaSLC4LbS7 A45C%C.L;?7LC# = c d= de Id"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide45",
    "text": "Segment Format (cont) \uf07aEach connection identified with 4-tuple: \uf079 (SrcPort, SrcIPAddr, DsrPort, DstIPAddr) \uf07aSliding window + flow control \uf079 acknowledgment, SequenceNum, AdvertisedWinow \uf07aFlags \uf079 SYN, FIN, RESET, PUSH, URG, ACK \uf07aChecksum \uf079 pseudo header + TCP header + data !\"#A\"% &D(D )!\"*+\"#,\"-+./ 0,N#234\"AR.\"#(S7 0A8\"%(9W\"A;9#A23 <\",\"98\"%"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide46",
    "text": "TCP Connection Management Recall: TCP sender, receiver establish \u201cconnection\u201d before exchanging data segments \uf07a initialize TCP variables: \uf079 seq. #s \uf079 buffers, flow control info \uf07a client: connection initiator \uf07a server: contacted by client Three way handshake: Step 1: client host sends TCP SYN segment to server \uf079 specifies initial seq # \uf079 no data Step 2: server host receives SYN, replies with SYNACK segment \uf079 specifies server initial seq. # Step 3: client receives SYNACK, replies with ACK segment,"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide47",
    "text": "Connection Setup 47 \uf07aWhy do we need connection setup? \uf079 To establish state on both hosts \uf079 Most important state: sequence numbers \uf078 Count the number of bytes that have been sent \uf078 Initial value chosen at random \uf078 Why? \uf07aImportant TCP flags (1 bit each) \uf079 SYN \u2013 synchronization, used for connection setup \uf079 ACK \u2013 acknowledge received data \uf079 FIN \u2013 finish, used to tear down connection"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide48",
    "text": "Three Way Handshake 48 \uf07aEach side: \uf079Notifies the other of starting sequence number \uf079ACKs the other side\u2019s starting sequence number Client Server SYN <SeqC, 0> SYN/ACK <SeqS, SeqC+1> ACK <SeqC+1, SeqS+1> Why Sequence # +1?"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide49",
    "text": "Connection Setup Issues 49 \uf07aConnection confusion \uf079 How to disambiguate connections from the same host? \uf079 Random sequence numbers \uf07aSource spoofing \uf079 Need good random number generators!"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide50",
    "text": "Connection Tear Down 53 \uf07aEither side can initiate tear down \uf07aOther side may continue sending data \uf079 Half open connection \uf079 shutdown() \uf07aAcknowledge the last FIN \uf079 Sequence number + 1 \uf07aWhat happens if 2nd FIN is lost? Client Server FIN <SeqA, *> ACK <*, SeqA+1> ACK Data FIN <SeqB, *> ACK <*, SeqB+1>"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide51",
    "text": "Bidirectional Communication 55 \uf07aEach side of the connection can send and receive \uf079Different sequence numbers for each direction Client Server Data (1460 bytes) Data/ACK (730 bytes) Data/ACK (1460 bytes) Seq. Ack. Seq. Ack. 1 23 23 1461 1461 753 753 2921 Data and ACK in the same packet 23 1"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide52",
    "text": "User Datagram Protocol (UDP) 56 \uf07aSimple, connectionless datagram \uf07aPort numbers enable demultiplexing \uf079 16 bits = 65535 possible ports \uf079 Port 0 is invalid \uf07aChecksum for error detection \uf079 Detects (some) corrupt packets \uf079 Does not detect dropped, duplicated, or reordered packets Destination Port 0 16 31 Message Length Source Port Checksum"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide53",
    "text": "Simple Demultiplexor (UDP) \uf07aUnreliable and unordered datagram service \uf07aNo flow control or error control \uf079 no need for sender-side buffer \uf07aEndpoints identified by ports \uf07aHeader format \uf07aOptional checksum \uf079 psuedo header (IP.src, IP.dsest, IP.proto, UDP.len) + UDP header + data !\"#$%\"C D(C$%\"C )*+#,(-. L+01C* D2C2 P 45 S4"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide54",
    "text": "Uses for UDP 58 \uf07aInvented after TCP \uf079 Why? \uf07aNot all applications can tolerate TCP \uf07aCustom protocols can be built on top of UDP \uf079 Reliability? Strict ordering? \uf079 Flow control? Congestion control? \uf07aExamples \uf079 Live media streaming (e.g. voice, video) \uf079 Facebook datacenter protocol"
  },
  {
    "doc": "lecture02_processed.json",
    "slide": "slide55",
    "text": "TCP vs UDP https://www.youtube.com/watch?v=cA9ZJdqzOoU"
  }
]