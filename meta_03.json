[
  {
    "doc": "lecture03_processed.json",
    "slide": "slide1",
    "text": "From Coulouris, Dollimore, Kindberg and Blair Distributed Systems: Concepts and Design Edition 5, \u00a9 Addison-Wesley 2012 Interprocess Communication"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide2",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5 \u00a9  Pearson Education 2012 The characteristics of interprocess communication \u2022 Messages are sent to (Internet address, local port) pairs. \u2022 A port has exactly one receiver but can have many senders \u2022 Processes may use multiple ports to receive messages \u2022 Validity: A point-to-point message service is reliable if messages are guaranteed to be delivered despite packet drop \u2022 Integrity"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide3",
    "text": "Sockets Application and middleware layers use the services provided by the network and transport layers through socket API. From Computer Networking by Kurose and Ross. application transport network link physical"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide4",
    "text": "4 Socket programming Socket API \u2022 introduced in BSD4.1 UNIX, 1981 \u2022 explicitly created, used, released by apps \u2022 client/server paradigm \u2022 two types of transport service via socket API: \u2022 unreliable datagram \u2022 reliable, byte stream-oriented a host-local, application-created, OS-controlled interface (a \u201cdoor\u201d) into which application process can both send and receive messages to/from another application process socket Goal: learn how to build client/server application that communicate using sockets"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide5",
    "text": "Processes-to-process communication Process: program running within a host. within same host, two processes communicate using inter-process communication (shared memory defined by OS). processes in different hosts communicate by exchanging messages using transport layer Client process: process that initiates communication Server process: process that waits to be contacted \uf072Note: applications with P2P architectures have client processes & server processes From Computer Networking by Kurose and Ros"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide6",
    "text": "Addressing processes to receive messages, process must have identifier host device has unique 32- bit IP address Q: does IP address of host on which process runs suffice for identifying the process? A: No, many processes can be running on the same host identifier includes both IP address and port number associated with the process What is a port number? 16 bits integer used by transport layer to identify end points (processes) on a host well-known ports:  1 \u2013 1023 Telnet 23; FTP 21; HTTP 80 regi"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide7",
    "text": "Sockets API, an interface, gate, door between a process and transport layer A socket must be bound to a local port Is (IP addr, port) enough to identify a socket? process TCP with buffers, variables socket host or server process TCP with buffers, variables socket host or server Internet controlled by OS controlled by app developer message agreed port any port socket socket Internet address = 138.37.88.249 Internet address = 138.37.94.248 other ports client server From Computer Networking by Kuro"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide8",
    "text": "Socket-programming using TCP Socket: a door between application process and end- end-transport protocol (UCP or TCP) TCP service: reliable transfer of bytes from one process to another process TCP with buffers, variables socket controlled by application developer controlled by operating system host or server process TCP with buffers, variables socket controlled by application developer controlled by operating system host or server internet From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide9",
    "text": "Socket programming with TCP Client must contact server \u2022 server process must first be running \u2022 server must have created socket (door) that welcomes client\u2019s contact Client contacts server by: \u2022 creating client-local TCP socket \u2022 specifying IP address, port number of server process \u2022 When client creates socket: client TCP establishes connection to server TCP When contacted by client, server TCP creates new socket for server process to communicate with client \u2022 allows server to talk with multiple"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide10",
    "text": "Socket with TCP 10 Web server has two sockets opened: one for each web page it is serving. These sockets are differentiated by the destination port numbers."
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide11",
    "text": "Client/server socket interaction: TCP Server (stand-by, waiting for requests) Client (initiate the request) Create socket (Claim resources/ available phone) Bind port (Claim ID on this machine/ get a phone extension No.) Listen/ accept (Wait for connections/ Wait for phone call) Send/ receive (Communication/ Chat on phone) Create socket (Claim resources/ available phone) Connect (connect to server/ call others) - (Don\u2019t care about public port/ phone #) Send/ receive (Communication/ Chat on phone"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide12",
    "text": "TCP Socket Primitives Primitive Function Socket Create a new communication endpoint Bind Attach a local address to a socket Listen Announce willingness to accept connections Accept Block caller until a connection request arrives Connect Actively attempt to establish a connection Send Send some data over the connection Recv Receive some data over the connection Close Release the connection Connection socket"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide13",
    "text": "Client/server socket interaction: TCP Server (stand-by, waiting for requests) Client (initiate the request) Create socket (Claim resources/ available phone) Bind port (Claim ID on this machine/ get a phone extension No.) Listen/ accept Send/ receive (Communication/ Chat on phone) Create socket (Claim resources/ available phone) Connect (connect to server/ call others) Send/ receive (Communication/ Chat on phone) Close socket (End communication/ Hang up the phone) Close socket (End communication/"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide14",
    "text": "Client/server socket interaction: TCP wait for incoming connection request connectionSocket = welcomeSocket.accept() create socket, port=x, for incoming request: welcomeSocket = ServerSocket() create socket, connect to hostid, port=x clientSocket = Socket() close connectionSocket read reply from clientSocket close clientSocket Server (running on hostid, port x) Client (running on hostname ?, port ?) send request using clientSocket read request from connectionSocket write reply to connectionSocke"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide15",
    "text": "15 Connection-oriented TCP \u2751TCP socket identified by 4-tuple: \u2022 source IP address \u2022 source port number \u2022 destion IP address \u2022 destion port number \u2751Receive host uses all four values to direct segment to appropriate socket"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide16",
    "text": "Socket programming with UDP UDP: no \u201cconnection\u201d between client and server \u2022 no handshaking \u2022 sender explicitly attaches IP address and port of destination \u2022 server must extract IP address, port of sender from received datagram UDP: transmitted data may be received out of order, or lost UDP provides unreliable transfer of groups of bytes (\u201cdatagrams\u201d) between client and server application viewpoint From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide17",
    "text": "Socket programming with UDP From Computer Networking by Kurose and Ross."
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide18",
    "text": "Multicast Communication At Network Layer"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide19",
    "text": "Unicast Communication In unicast routing, the router forwards the received packet through only one of its interfaces."
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide20",
    "text": "Multicast Communication Broadcast \u2013 sends a single message from one process to all processes (hosts) \u2022 Used for ARP in a LAN \u2022 Hard and expensive in WAN Multicast \u2013 sends a single message from one process to members of a group of processes (hosts) Who needs multicast? Who should provide it? Application, transport, network layer? https://www.youtube.com/watch?v=C5pFaZtbISo"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide21",
    "text": "Multicast Communication \u2022 In multicast routing, the router may forward the received packet through several of its interfaces"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide22",
    "text": "Who needs it? Uses of Multicast and Its Effects Fault tolerance based on replicated services \u2022 Requests multicast to group of servers Discovery in spontaneous networking \u2022 Locate available discovery services Performance from replicated data \u2022 Multicast changes to all replicas Propagation of event notifications in a distributed environment \u2022 News group: news \u2192 group of interested users"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide23",
    "text": "Multicast IP address oc tet 1 oc tet 2 oc tet 3 Class  A: 1 to 127 0 to 255 0 to 255 1 to 254 Class  B: 128 to 191 Class  C: 192 to 223 224 to 239 Class  D (multicast) : Network  ID Network  ID Network  ID Host ID Host ID Host ID Multic ast addres s 0 to 255 0 to 255 1 to 254 0 to 255 0 to 255 0 to 255 0 to 255 0 to 255 0 to 255 Multic ast addres s 0 to 255 0 to 255 1 to 254 240 to 255 Class  E ( res erv ed) : 1.0.0.0 to 127.255.255.255 128.0.0.0 to 191.255.255.255 192.0.0.0 to 223.255.255.255 2"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide24",
    "text": "IP Multicast Process Each multicast address \u2192 identify a group Internet Group Membership Protocol (IGMP) \u2022 Processes register a group with local router using IGMP Router update its multicast routing table Processes send message to a group \u2022 Do not need to be a member Router forward multicast messages"
  },
  {
    "doc": "lecture03_processed.json",
    "slide": "slide25",
    "text": "Multicast Routing Problem Goal: find a tree (or trees) connecting routers having local multicast group members tree: not all paths between routers used source-based: different tree from each sender to receivers shared-tree: same tree used by all group members Shared tree Source-based trees From Computer Networking by Kurose and Ross."
  }
]