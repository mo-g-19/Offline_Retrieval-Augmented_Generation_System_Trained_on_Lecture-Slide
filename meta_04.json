[
  {
    "doc": "04",
    "slide": "slide1",
    "text": "From Coulouris, Dollimore, Kindberg and Blair\nDistributed Systems: \n \n \nConcepts and Design\nEdition 5, \u00a9 Addison-Wesley 2012\n Indirect Communication"
  },
  {
    "doc": "04",
    "slide": "slide2",
    "text": "2\n\u2022 Group Communication\n\u2022 Publish-Subscribe\n\u2022 Message Queues\n\u2022 Share Memory"
  },
  {
    "doc": "04",
    "slide": "slide3",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nObjectives\n\u2022 To understand the key concepts of group communications, \npublish-subscribe systems, message queue, tuple and \ndistributed share memory"
  },
  {
    "doc": "04",
    "slide": "slide4",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nIndirect communication\n\u2022 Indirect communication: communication through an intermediary \nwith no direct coupling between the sender and the receiver(s).\n\u2022 Space uncoupling: the sender does not know or need to know the identity \nof the receiver(s), and vice versa\n\u2022 Time uncoupling: the sender and receiver(s) can have independent lifetimes\n\u2022 It is often "
  },
  {
    "doc": "04",
    "slide": "slide5",
    "text": "5\nInstructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nSpace and time coupling in distributed systems"
  },
  {
    "doc": "04",
    "slide": "slide6",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nGroup communication\n\u2022 It offers a service whereby a message is sent to a group and then \nthis message is delivered to all members of the group\n\u2022 The sender is not aware of the identities of the receivers\n\u2022 Group communication represents an abstraction over multicast \ncommunication adding significant extra value in terms of \nmanaging group membership, "
  },
  {
    "doc": "04",
    "slide": "slide7",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nThe programming model\n\u2022 The central concept is that of a group with associated group \nmembership, whereby processes may join or leave the group\n\u2022 Processes can then send a message to this group and have it \npropagated to all members of the group with certain guarantees in \nterms of reliability and ordering\n\u2022 The essential feature of group communicatio"
  },
  {
    "doc": "04",
    "slide": "slide8",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore and Kindberg   Distributed Systems: Concepts and Design   Edn. 4   \n\u00a9  Pearson Education 2005 \nOpen and closed groups\nClosed group\nOpen group"
  },
  {
    "doc": "04",
    "slide": "slide9",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nImplementation issues\n\u2022 Reliability and ordering in multicast\n\u2022 Integrity: the message received is the same as the one sent, and no \nmessages are delivered twice\n\u2022 Validity: guarantees that a message sent will eventually be delivered\n\u2022 Agreement: if the message is delivered to one process, then it is delivered \nto all processes in the group.\n\u2022 Group c"
  },
  {
    "doc": "04",
    "slide": "slide10",
    "text": "10\nGroup membership management"
  },
  {
    "doc": "04",
    "slide": "slide11",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nImplementation issues\n\u2022 Main tasks:\n\u2022 Providing an interface for group membership changes \n\u2022 Failure detection\n\u2022 Notifying members of group membership changes\n\u2022 Performing group address expansion. it can decide consistently where to \ndeliver any given message, even though the membership may be changing \nduring delivery.\n\u2022 Group communication is most e"
  },
  {
    "doc": "04",
    "slide": "slide12",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nPublish-subscribe systems\n\u2022\nAlso referred to as distributed event-based systems\n\u2022\nPublisher publish structured events to an event service\n\u2022\nSubscribers express interest in particular events through subscriptions which \ncan be arbitrary patterns over the structured events\n\u2022\nApplications: \n\u2022\nFinancial information systems\n\u2022\nOther areas with live feeds of"
  },
  {
    "doc": "04",
    "slide": "slide13",
    "text": "13\nInstructor\u2019s Guide for  Coulouris, Dollimore and Kindberg   Distributed Systems: Concepts and Design   Edn. 4   \n\u00a9  Pearson Education 2005 \nThe publish-subscribe paradigm"
  },
  {
    "doc": "04",
    "slide": "slide14",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore and Kindberg   Distributed Systems: Concepts and Design   Edn. 4   \n\u00a9  Pearson Education 2005 \nExample: Dealing room system\nDealer\u2019s computer\nInformation\nprovider\nDealer\nExternal\nsource\nExternal\nsource\nInformation\nprovider\nDealer\nDealer\nDealer\nNotification\nNotification\nNotification\nNotification\nNotification\nNotification\nNotification\nNotification\nDealer\u2019s computer\nDealer\u2019s computer\nDealer\u2019s computer\nNotification\nNotification"
  },
  {
    "doc": "04",
    "slide": "slide15",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nImplementation issues\n\u2022\nThe task of a publish-subscribe system is to ensure that events are delivered \nefficiently to all subscribers that have filters defined that match the event\n\u2022\nSubscription filter model:\n\u2022\nChannel-based\n\u2022\nTopic-based\n\u2022\nContent-based\n\u2022\nType-based\n\u2022\nCentralized versus distributed implementations"
  },
  {
    "doc": "04",
    "slide": "slide16",
    "text": "16\nInstructor\u2019s Guide for  Coulouris, Dollimore and Kindberg   Distributed Systems: Concepts and Design   Edn. 4   \n\u00a9  Pearson Education 2005 \nA network of brokers (Centralized)"
  },
  {
    "doc": "04",
    "slide": "slide17",
    "text": "17\nInstructor\u2019s Guide for  Coulouris, Dollimore and Kindberg   Distributed Systems: Concepts and Design   Edn. 4   \n\u00a9  Pearson Education 2005 \nThe architecture of publish-subscribe systems"
  },
  {
    "doc": "04",
    "slide": "slide18",
    "text": "18\nInstructor\u2019s Guide for  Coulouris, Dollimore and Kindberg   Distributed Systems: Concepts and Design   Edn. 4   \n\u00a9  Pearson Education 2005 \nExample publish-subscribe systems"
  },
  {
    "doc": "04",
    "slide": "slide19",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nMessage queues\n\u2022\nMessage queues provide a point-to-point service using the concept of a \nmessage queue as an indirection\n\u2022\nThe main use of such products is to achieve Enterprise Application Integration\n\u2022\nThey are also extensively used as the basis for commercial transaction \nprocessing systems"
  },
  {
    "doc": "04",
    "slide": "slide20",
    "text": "20\nInstructor\u2019s Guide for  Coulouris, Dollimore and Kindberg   Distributed Systems: Concepts and Design   Edn. 4   \n\u00a9  Pearson Education 2005 \nThe message queue paradigm"
  },
  {
    "doc": "04",
    "slide": "slide21",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore and Kindberg   Distributed Systems: Concepts and Design   Edn. 3   \n\u00a9  Addison-Wesley Publishers 2000 \nThe distributed shared memory abstraction"
  },
  {
    "doc": "04",
    "slide": "slide22",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nShared memory approaches\n\u2022\nDistributed shared memory (DSM) is an abstraction used for sharing data \nbetween computers that do not share physical memory\n\u2022\nProcesses access DSM by reads and updates to what appears to be ordinary \nmemory within their address space\n\u2022\nIt is as though the processes access a single shared memory, but in fact the \nphysical me"
  },
  {
    "doc": "04",
    "slide": "slide23",
    "text": "Instructor\u2019s Guide for  Coulouris, Dollimore, Kindberg and Blair,  Distributed Systems: Concepts and Design   Edn. 5   \n\u00a9  Pearson Education 2012 \nTuple space communication\n\u2022\nprocesses communicate indirectly by placing tuples in a tuple space, from \nwhich other processes can read or remove them\n\u2022\nTuples consist of a sequence of one or more typed data fields such as <\"fred\", \n1958>,  <\"sid\", 1964> and <4, 9.8, \"Yes\">\n\u2022\nOperations\n\u2022\nWrite\n\u2022\nRead\n\u2022\nTake\n\u2022\nTuples are immutable"
  },
  {
    "doc": "04",
    "slide": "slide24",
    "text": "24\nInstructor\u2019s Guide for  Coulouris, Dollimore and Kindberg   Distributed Systems: Concepts and Design   Edn. 4   \n\u00a9  Pearson Education 2005 \nThe tuple space abstraction"
  },
  {
    "doc": "04",
    "slide": "slide25",
    "text": "25\nInstructor\u2019s Guide for  Coulouris, Dollimore and Kindberg   Distributed Systems: Concepts and Design   Edn. 4   \n\u00a9  Pearson Education 2005 \nSummary of indirect communication styles"
  }
]