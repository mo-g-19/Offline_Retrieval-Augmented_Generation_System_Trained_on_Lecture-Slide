[
  {
    "doc": "01",
    "slide": "slide1",
    "text": "CECS 327\nHailu Xu\nIntroduction to Networks\nand Distributed Computing"
  },
  {
    "doc": "01",
    "slide": "slide2",
    "text": "1. Introduction\nTextbook: Distributed Systems, concepts and design, Fifth Edition \nThanks the slides from Andrew Tanenbaum and Marten van Steen, Distributed Systems \u2013 Principles and Paradigms, Ying Lu, \nUNL, CSCE990 Advanced Distributed Systems Seminar\nhttp://cse.unl.edu/~ylu/csce990/notes/Introduction.ppt"
  },
  {
    "doc": "01",
    "slide": "slide3",
    "text": "The Rise of Distributed Systems\n\u2022 Computer hardware prices falling, power increasing\n\u2022 Network connectivity increasing\n\u2022 Everyone is connected with networks, even when moving\n\u2022 It is easy to connect hardware together\n\u2022\nLayered abstractions have worked very well\n\u2022 Definition: a distributed system is\n\u201cA collection of independent computers that appears to its users as a single coherent \nsystem\u201d\nEnslow\u2019s Definition\nDistributed System = Distributed hardware +  Distributed control + Distributed data"
  },
  {
    "doc": "01",
    "slide": "slide4",
    "text": "Why Distributed Computing?\nA. Big data continues to grow.\nB. Applications are becoming data-intensive.\n- Big data - large pools of \ndata captured, \ncommunicated, aggregated, \nstored, and analyzed\n- Google processes 20 \npetabytes of data per day\n- E.g., data-intensive app: \nastronomical data parsing"
  },
  {
    "doc": "01",
    "slide": "slide5",
    "text": "Why Distributed Systems?\nC. Individual computers have limited resources compared to scale of \ncurrent problems & application domains:\n1. Caches and Memory:\nL1 \nCache \nL2 Cache\nL3 Cache\nMain Memory\n16KB- 64KB, 2-4 cycles\n512KB- 8MB, 6-15 cycles\n4MB- 32MB, 30-50 cycles\n2GB- 16GB, 300+ cycles\n1-5 TB, 3 billion+ cycles\nHard Drive"
  },
  {
    "doc": "01",
    "slide": "slide6",
    "text": "Why Distributed Systems?\nP\nL1\nL2\nP\nL1\nL2 Cache\nP\nL1\nP\nL1\nP\nL1\nInterconnect\n2.  Processor:\n\u00a7 Number of transistors integrated on single die has \ncontinued to grow at Moore\u2019s pace\n\u00a7 Chip Multiprocessors (CMPs) are now available\nA single Processor Chip\nA CMP"
  },
  {
    "doc": "01",
    "slide": "slide7",
    "text": "Why Distributed Systems?\n3. Processor (continued):\n\u00a7 CPU speed grows at rate of 55% annually, but mem speed \ngrew only 7%\nMemory\nMemory\nP\nM\nP\nL1\nL2\nP\nL1\nL2 Cache\nP\nL1\nP\nL1\nP\nL1\nInterconnect\nProcessor-Memory speed gap"
  },
  {
    "doc": "01",
    "slide": "slide8",
    "text": "Why Distributed Systems?\n\u00a7 Even if 100s or 1000s of cores are placed on CMP, challenge \nto deliver stored data to cores fast enough for processing\nA Data Set\nof 4 TBs\n4 100MB/S IO Channels\n10000 \nseconds (or \n3 hours) to \nload data\nMemory\nP\nL1\nL2 Cache\nP\nL1\nP\nL1\nP\nL1\nInterconnect"
  },
  {
    "doc": "01",
    "slide": "slide9",
    "text": "Why Distributed Systems?\nOnly 3 \nminutes to \nload data\nA Data Set (data) \nof 4 TBs\nSplits\nMemory\nP\nL1\nL2\nMemory\nP\nL1\nL2\n100 \nMachines\nDistributed systems to the rescue!"
  },
  {
    "doc": "01",
    "slide": "slide10",
    "text": "But this brings new requirements\n\u00a7\nA way to express problem as parallel processes and execute them \non different machines (Programming Models and Concurrency).\n\u00a7\nA way for processes on different machines to exchange information \n(Communication).\n\u00a7\nA way for processes to cooperate with one another and agree on \nshared values (Synchronization).\n\u00a7\nA way to enhance reliability and improve performance (Consistency \nand Replication).\n\u00a7\nA way to recover from partial failures (Fault Tolerance).\n\u00a7\nA way "
  },
  {
    "doc": "01",
    "slide": "slide11",
    "text": "Depiction of a Distributed System\n\u2022\nDistributed system organized as middleware. Note middleware layer \nextends over multiple machines.\n\u2022\nUsers can interact with system in consistent way, regardless of where \ninteraction takes place (e.g., RPC, memcached, \u2026\n\u2022\nNote: Middleware may be \u201cpart\u201d of application in practice\nExamples:\n- The Web\n- Processor pool\n- Shared memory pool\n- Airline reservation\n- Network game\n- The Cloud"
  },
  {
    "doc": "01",
    "slide": "slide12",
    "text": "Introduction\n\u2022 Overview  \n \n(done)\n\u2022 Goals \n \n \n(next)\n\u2022 Software \n\u2022 Architecture \n \n \n \n\u2022 Examples"
  },
  {
    "doc": "01",
    "slide": "slide13",
    "text": "Goal - Transparency\nTransparency\nDescription\nAccess\nHide differences in data representation and how a resource is \naccessed\nLocation\nHide where a resource is located\nMigration \nHide that a resource may move to another location\nRelocation\nHide that a resource may be moved to another location while \nin use\nReplication\nHide that a resource may be copied\nConcurrency\nHide that a resource may be shared by several competitive \nusers\nFailure\nHide the failure and recovery of a resource\nPersistence\nHide w"
  },
  {
    "doc": "01",
    "slide": "slide14",
    "text": "Goal - Scalability\n\u2022 As systems grow, centralized solutions are limited\n\u2022 Consider LAN name resolution (ARP) vs. WAN\nConcept\nExample\nCentralized services\nA single server for all users\nCentralized data\nA single on-line telephone book\nCentralized algorithms\nDoing routing based on complete \ninformation\n\u2022 Ideally, collect information in distributed fashion and distribute in  \ndistributed fashion\n\u2022 But sometimes, hard to avoid (e.g., consider money in bank)\n\u2022 Challenges: geography, ownership domains,"
  },
  {
    "doc": "01",
    "slide": "slide15",
    "text": "Scaling Technique: Hiding \nCommunication Latency\n\u2022\nEspecially important for interactive applications\n\u2022\nIf possible, do asynchronous communication \u2013 \ncontinue working so user does not notice delay\n \n- Not always possible when client has nothing to do\n\u2022\nInstead, can hide latencies"
  },
  {
    "doc": "01",
    "slide": "slide16",
    "text": "Root DNS Servers\ncom DNS servers\norg DNS servers\nedu DNS servers\npoly.edu\nDNS servers\numass.edu\nDNS servers\nyahoo.com\nDNS servers\namazon.com\nDNS servers\npbs.org\nDNS servers\nScaling Technique: Distribution\nClient wants IP for www.amazon.com (approximation):\n1.\nClient queries root server to find .com DNS server\n2.\nClient queries .com DNS server to get amazon.com DNS server\n3.\nClient queries amazon.com DNS server to get IP address for \nwww.amazon.com\n?\n1.\n2.\n3.\n\u2022\nSpread information/processing to mo"
  },
  {
    "doc": "01",
    "slide": "slide17",
    "text": "Scaling Technique: Replication\n\u2022 Copy of information to increase availability and decrease \ncentralized load\n\u2022 Example: File caching is replication decision made by client\n\u2022 Example: CDNs (e.g., Akamai) for Web\n\u2022 Example: P2P networks (e.g., BitTorrent) distribute copies uniformly \nor in proportion to use\n\u2022 Issue: Consistency of replicated information\n\u2022 Example: Web browser cache\u2013 how to tell it is out of date?"
  },
  {
    "doc": "01",
    "slide": "slide18",
    "text": "Introduction\n\u2022 Overview  \n \n(done)\n\u2022 Goals \n \n \n(done)\n\u2022 Software  \n \n(next)\n\u2022 Architecture \n \n \n \n\u2022 Examples"
  },
  {
    "doc": "01",
    "slide": "slide19",
    "text": "Software Structure\n\u2022 Layers in centralized computer systems:\nApplications\nMiddleware\nOperating system\nComputer and Network Hardware\n19"
  },
  {
    "doc": "01",
    "slide": "slide20",
    "text": "Software Structure\n\u2022 Layers and dependencies in distributed systems:\nApplications\nDistributed programming\nsupport\nOpen\nservices\nOpen system kernel services\nComputer and network hardware\n20"
  },
  {
    "doc": "01",
    "slide": "slide21",
    "text": "Introduction\n\u2022 Overview  \n \n(done)\n\u2022 Goals \n \n \n(done)\n\u2022 Software  \n \n(done)\n\u2022 Architecture \n \n(next)  \n\u2022 Examples"
  },
  {
    "doc": "01",
    "slide": "slide22",
    "text": "System Architectures\n\u2022 Client-Server\n\u2022 Peer-to-Peer\n\u2022 Services provided by multiple servers\n\u2022 Proxy servers and caches\n\u2022 Mobile code and mobile agents\n\u2022 Network computers\n\u2022 Thin clients and mobile devices\n22"
  },
  {
    "doc": "01",
    "slide": "slide23",
    "text": "1. Clients Invoke Individual Servers\n23\nServer\nClient\nClient\ninvocation\nresult\nServer\ninvocation\nresult\nProcess:\nKey:\nComputer:"
  },
  {
    "doc": "01",
    "slide": "slide24",
    "text": "2. Peer-to-peer Systems\nApplication\nApplication\nApplication\nPeer 1\nPeer 2\nPeer 3\nPeers 5 .... N\nSharable\nobjects\nApplication\nPeer 4\n24"
  },
  {
    "doc": "01",
    "slide": "slide25",
    "text": "3. A Service by Multiple Servers\n25\nServer\nServer\nServer\nService\nClient\nClient"
  },
  {
    "doc": "01",
    "slide": "slide26",
    "text": "4. Web Proxy Server\n26\nClient\nProxy\nWeb \nserver\nWeb \nserver\nserver\nClient"
  },
  {
    "doc": "01",
    "slide": "slide27",
    "text": "5. Web Applets\n27\na) client request results in the downloading of applet code \nWeb \nserver\nClient\nWeb \nserver\nApplet\nApplet code\nClient\nb) client  interacts with the applet"
  },
  {
    "doc": "01",
    "slide": "slide28",
    "text": "6. Thin Clients and Compute Servers\n28\nThin\nClient\nApplication\nProcess\nNetwork computer or PC\nCompute server\nnetwork"
  },
  {
    "doc": "01",
    "slide": "slide29",
    "text": "Introduction\n\u2022 Overview  \n \n(done)\n\u2022 Goals \n \n \n(done)\n\u2022 Software  \n \n(done)\n\u2022 Architecture \n \n(done)\n\u2022 Examples  \n \n(next)"
  },
  {
    "doc": "01",
    "slide": "slide30",
    "text": "Examples of Distributed Systems\n\u2022 Cloud Computing and Xaas\n30"
  },
  {
    "doc": "01",
    "slide": "slide31",
    "text": "Distributed Computing (old time)\n\u2022 The Problem\n\u2022 Want to run compute/data intensive task\n\u2022 But don\u2019t have enough resources to run job locally\n\u2022 At least, to get results within sensible timeframe\n\u2022 Would like to use another, more capable resource\n\u2022 Solution \u00e0 Distributed Computing\nLocal\nInstitutional\nNational\nInternational\nImages: nasaimages, Extra Ketchup, Google Maps, Dave Page"
  },
  {
    "doc": "01",
    "slide": "slide32",
    "text": "Distributed Computing (Now)\n\u2022 Compute and data \u2013 if you need more, you go \nsomewhere else to get it\n\u2022 Olden times - Small number of \u201cfast\u201d computers\n\u2022 Very expensive\n\u2022 Centralized\n\u2022 Used nearly all time\n\u2022 Time allocations for users\n\u2022 Modern times\n\u2022 Cloud and Grid (next)\nCray-1 1976 - $8.8 mill, 160 \nMFLOPS, 8MB RAM\n\u2022\nPS4 ~1 TFLOP\n\u2022\nSmartphones ~200 MFLOPS\nbrewb\nooks\nCray X"
  },
  {
    "doc": "01",
    "slide": "slide33",
    "text": "What is Cloud Computing?\n\u2022 Many ways to define it (maybe one for every supplier of \u201ccloud\u201d)\n\u2022 Key characteristics:\n\u2022 On demand, dynamic allocation of resources \u2013 \u201celasticity\u201d\n\u2022 Abstraction of resource\n\u2022 Self-managed\n\u2022 Billed for what you use, e.g., CPU, time, storage space\n\u2022 Standardized interfaces\n[FZRL08] I. Foster, Y. Zhao, I. Raicu, and S. Lu, \u201cCloud Computing and Grid Computing 360-Degree \nCompared,\u201d in Proceedings of Grid Computing Environments Workshop (GCE), Austin, TX, USA, \nNov. 2008, "
  },
  {
    "doc": "01",
    "slide": "slide34",
    "text": "Internet\nCloud Architecture\n\u2022 Cloud computing can deliver at any of these levels\n\u2022 These levels are often blurred and routinely disputed!\n\u2022 Resources provided on demand\n1- IaaS - Infrastructure as a Service\nHardware\nOS\n2- PaaS - Platform as a Service\nFramework\nMiddleware\n3- SaaS - Software as a Service\nHosted Applications\nInfrastructure\nEnd user/\nCustomer\nDevelope\nr/ Service \nProvider"
  },
  {
    "doc": "01",
    "slide": "slide35",
    "text": "IaaS \u2013 Infrastructure as a Service\n\u2022 User gets access to (usually) virtualised hardware\n\u2022 Servers, storage, networking\n\u2022 Operating system\n\u2022 User responsible for managing OS, middleware, runtime, data, \napplication (development)\n\u2022 e.g., Amazon EC2\n\u2022 Get complete virtualized PC (e.g., Linux instance)"
  },
  {
    "doc": "01",
    "slide": "slide36",
    "text": "PaaS \u2013 Platform as a Service\n\u2022 Integrated development environment\n\u2022 e.g., application design, testing, deployment, hosting, frameworks \nfor database integration, storage, app versioning, etc.\n\u2022 Develop applications on top\n\u2022 Responsible for managing data, application (development)\n\u2022 Example - Google App Engine"
  },
  {
    "doc": "01",
    "slide": "slide37",
    "text": "SaaS \u2013 Software as a Service\n\u2022 Top layer consumed directly by end user \u2013 the \u2018business\u2019 functionality\n\u2022 Application software provided, you configure it (more or less)\n\u2022 Various levels of maturity:\n\u2022 Level 1: each customer has own customised version of application in own instance\n\u2022 Level 2: all instances use same application code, but configured individually\n\u2022 Level 3: single instance of application across all customers\n\u2022 Level 4: multiple customers served on load-balanced \u2018farm\u2019 of identical ins"
  },
  {
    "doc": "01",
    "slide": "slide38",
    "text": "Also HuaaS \u2013 Human as a Service\n\u2022 Extraction of information from \ncrowds of people\n\u2022 Arbitrary (e.g., notable YouTube \nvideos)\n\u2022 On-demand task\nAmazon Mechanical Turk\nGames with a Purpose"
  },
  {
    "doc": "01",
    "slide": "slide39",
    "text": "Where to Apply Distributed Systems?\nApplication Domain\nAssociated Networked Application\nFinance and commerce\nE-commerce (e.g., Amazon and eBay, PayPal),  online \nbanking and trading \nThe information society\nWeb information and  search engines, e-books, \nWikipedia; social networking: Facebook and Instagram, \nTwitter.\nCreative industries and entertainment\nOnline gaming,  music and film in the home, user-\ngenerated content, e.g. YouTube, Flickr\nHealthcare\nHealth informatics, on online patient recor"
  }
]